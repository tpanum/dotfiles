#+TITLE: Emacs Configuration
#+AUTHOR: Thomas Kobber Panum
#+PROPERTY: header-args :tangle yes

* Configuration
  :PROPERTIES:
  :VISIBILITY: children
  :END:

** Table of Contents :TOC_3_gh:
- [[#configuration][Configuration]]
  - [[#org-file-tweaks][Org File Tweaks]]
    - [[#automatically-tangle][Automatically Tangle]]
    - [[#visibility-settings][Visibility Settings]]
    - [[#table-of-contents][Table of Contents]]
  - [[#personal-information][Personal Information]]
  - [[#emacs-initialization][Emacs Initialization]]
    - [[#settings][Settings]]
    - [[#package-management][Package Management]]
    - [[#new-defaults][New Defaults]]
  - [[#packages][Packages]]
    - [[#doom-theme][Doom Theme]]
    - [[#dashboard][Dashboard]]
    - [[#modeline][Modeline]]
    - [[#evil][Evil]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#company][Company]]
    - [[#swiper][Swiper]]
    - [[#magit][Magit]]
    - [[#org][Org]]
    - [[#toc-org][Toc-org]]
    - [[#which-key][Which Key]]
    - [[#general-navigation][General (Navigation)]]
    - [[#aggresive-indent][Aggresive Indent]]
    - [[#yassnippets][Yassnippets]]
    - [[#nlinum][Nlinum]]
    - [[#circe-irc][Circe (IRC)]]
    - [[#erc-irc][ERC (IRC)]]
    - [[#password-store][Password Store]]
    - [[#language-servers][Language Servers]]
    - [[#smartparens][Smartparens]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#rainbow-delimiters][Rainbow-Delimiters]]
    - [[#flyspell-mode][Flyspell Mode]]
    - [[#flycheck][Flycheck]]
    - [[#ace-window][Ace Window]]
    - [[#lang-tool][Lang Tool]]
    - [[#synosaurus][Synosaurus]]
    - [[#avy][Avy]]
    - [[#tramp][Tramp]]
  - [[#additional-modes][Additional Modes]]
    - [[#nix-mode][Nix Mode]]
    - [[#markdown-mode][Markdown Mode]]
    - [[#go-mode][Go Mode]]
    - [[#docker-mode][Docker Mode]]
    - [[#web-mode][Web Mode]]
    - [[#python-mode][Python Mode]]
    - [[#vue-mode][Vue Mode]]
    - [[#json-mode][JSON Mode]]
    - [[#yaml-mode][YAML Mode]]
    - [[#tex-mode][Tex Mode]]
    - [[#protobuf-mode][Protobuf Mode]]
    - [[#git-gutter-mode][Git Gutter Mode]]
  - [[#functions][Functions]]
    - [[#open-config][Open Config]]
  - [[#post-initialization][Post Initialization]]

** Org File Tweaks
   There are a few tweaks included in this org file that make it a little easier to
   work with.
   
*** Automatically Tangle
    First there is a property defined on the file:

    #+BEGIN_SRC :tangle no
header-args :tangle yes
    #+END_SRC

    This tells emacs to automatically tangle (include) all code blocks in this file when
    generating the code for the config, unless the code block explicitly includes
    =:tangle no= as the above code block does.

*** Visibility Settings
    Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
    that tells org to show it's direct children on startup. This way a clean outline of all
    sub headings under Configuration is shown each time this file is opened in org-mode.

*** Table of Contents
    Finally, there is a [[Table of Contents][Table of Contents]] heading that includes the tag: =:TOC_3_gh:=. This
    tells an org-mode package =toc-org= to generate a table of contents under this heading
    that has a max depth of 3 and is created using Github-style hrefs. This table of contents
    is updated everytime the file is saved and makes for a functional table of contents that
    works property directly on github.
** Personal Information
   Let's set some variables with basic user information.

   #+BEGIN_SRC emacs-lisp
(setq user-full-name "Thomas Kobber Panum")
   #+END_SRC

** Emacs Initialization
*** Settings
    We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
    We'll lower this value significantly after initialization has completed. We don't want to keep this value
    too high or it will result in long GC pauses during normal usage.

    #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6))
    #+END_SRC

    Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
    if you would like to see any and all byte compiler warnings.

    #+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
    #+END_SRC

*** Package Management
**** Package Settings
     We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
     performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
     to not automatically call it on our behalf. Additionally we're setting
     =package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
     =use-package= will be handling that.

     #+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
	  package-user-dir "~/.emacs.d/elpa"
	  package--init-file-ensured t
	  package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
     #+END_SRC

**** Use-Package Settings
     Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
     initialization significantly as many packages are only loaded later when they are explicitly used.

     #+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
	use-package-verbose t)
     #+END_SRC

**** Manually Set Load Path
     We're going to set the load path ourselves so that we don't have to call =package-initialize= at
     runtime and incur a large performance hit. This load-path will actually be faster than the one
     created by =package-initialize= because it appends the elpa packages to the end of the load path.
     Otherwise any time a builtin package was required it would have to search all of third party paths
     first.

     #+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
     #+END_SRC

**** Initialize Package Management
     Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
     Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
     we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
     missing packages.

     Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
     of the package initialization during compilation so that when byte compiled, all of this time consuming
     code is skipped. This can be done because the result of byte compiling =use-package= statements results
     in the macro being fully expanded at which point =use-package= isn't actually required any longer.

     Since the code is automatically compiled during runtime, if the configuration hasn't already been
     previously compiled manually then all of the package initialization will still take place at startup.

     #+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'package)

    (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

    (unless (assoc-default "org" package-archives)
      (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t))

    (unless (assoc-default "melpa" package-archives)
      (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

    (package-initialize)
    (package-refresh-contents)

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t))
     #+END_SRC

*** New Defaults
**** Base
     #+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1 )		; delete excess backup versions silently
(setq version-control t )		; use version control
(setq vc-make-backup-files t )		; make backups file even when in version controlled dir
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
(setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
(setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
(setq ring-bell-function 'ignore )	; silent bell when you make a mistake
(setq coding-system-for-read 'utf-8 )	; use utf-8 by default
(setq coding-system-for-write 'utf-8 )
(setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
(setq default-fill-column 80)		; toggle wrapping text at the 80th character
(setq initial-scratch-message "") ; print a default message in the empty scratch buffer opened at startup
(setq calendar-date-style "european")
     #+END_SRC
**** UI
     #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (blink-cursor-mode -1)
     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (setq mouse-highlight nil)
     (setq column-number-mode t)
     (setq-default cursor-in-non-selected-windows nil)
     (setq x-underline-at-descent-line t)
     (setq x-stretch-cursor t)
     (setq frame-resize-pixelwise t)
     (setq uniquify-buffer-name-style 'forward)
     (show-paren-mode)
     (fset 'yes-or-no-p 'y-or-n-p)
     (set-mouse-color "#ffffff") 
     (set-frame-font "Fira Mono")
     #+END_SRC

**** Ligatures
#+BEGIN_SRC emacs-lisp
(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
              (width (string-width s))
              (prefix ())
              (suffix '(?\s (Br . Br)))
              (n 1))
	 (while (< n width)
	   (setq prefix (append prefix '(?\s (Br . Bl))))
	   (setq n (1+ n)))
	 (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)

(add-hook 'prog-mode-hook #'fira-code-mode)
#+END_SRC
** Packages
*** Doom Theme
    #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
     :config
     (progn
     (load-theme 'doom-one t)
     (doom-themes-neotree-config)
     (doom-themes-org-config)))
    #+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-startup-banner 'logo)
  :custom
  (initial-buffer-choice '(lambda ()
                            (setq initial-buffer-choice nil)
                            (get-buffer "*dashboard*")))
  (dashboard-items '((agenda . 10))))
#+END_SRC
*** Modeline
    #+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package moody
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode))

(setq-default mode-line-modified
	      '(:eval
		(if (buffer-file-name)
		    (if (file-exists-p (buffer-file-name)) (if (buffer-modified-p)
							       (all-the-icons-faicon "plus-circle" :face 'all-the-icons-lorange)
							     " ")
		      (all-the-icons-faicon "plus-circle" :face 'all-the-icons-lblue))
		  " ")))

(setq-default mode-line-format '(
				 "%e"
				 mode-line-front-space
				 mode-line-modified
				 mode-line-frame-identification
				 all-the-icons-icon-for-buffer
				 moody-mode-line-buffer-identification
				 "   "
				 (vc-mode moody-vc-mode)
				 "  "
				 tracking-mode-line-buffers
				 mode-line-modes
				 mode-line-end-spaces))

    #+END_SRC

*** Evil
    Install, automatically load, and enable evil. It's like vim, but better!
    #+BEGIN_SRC emacs-lisp
    (use-package evil
    :demand t
    :config
    (evil-mode 1)
(define-key key-translation-map (kbd "ESC") (kbd "C-g")))
    #+END_SRC
    
    Handling code comments correctly with Evil :-)

    #+BEGIN_SRC emacs-lisp
    (use-package evil-nerd-commenter
    :demand t
    :config
    (evilnc-default-hotkeys))
    #+END_SRC

    Manage surronding objects

    #+BEGIN_SRC emacs-lisp
    (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
    #+END_SRC

#+BEGIN_SRC emacs-lisp
    (use-package evil-indent-plus
    :ensure t
    :config
    (evil-indent-plus-default-bindings))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-snipe
:after general
  :config
  (setq  evil-snipe-scope 'whole-visible)
  (evil-snipe-mode 1)
  (evil-snipe-override-mode 1))
#+END_SRC

    Mode for handling alignment

    #+BEGIN_SRC emacs-lisp
    (use-package evil-lion
    :config
    (evil-lion-mode))
    #+END_SRC

*** Ivy
    Generic completion frontend that's just awesome! Let's install and enable it.

    #+BEGIN_SRC emacs-lisp
    (use-package ivy
    :demand t
    :config
    (ivy-mode 1)

    (use-package smex) ; needed so that commands are ordered by usage
    (global-set-key [remap execute-extended-command] #'counsel-M-x)
    (global-set-key [remap find-file] #'counsel-find-file)
)
    #+END_SRC

*** Counsel
    Counsel allows us to utilize ivy by replacing many built-in and common functions
    with richer versions. Let's install it!

    #+BEGIN_SRC emacs-lisp
(use-package counsel
  :demand t)
    #+END_SRC

*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init . global-company-mode)
  :config
(setq company-tooltip-align-annotations t)
(setq company-idle-delay 0.2)
(setq company-minimum-prefix-length 2))
#+END_SRC

Add icons to company
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :hook (company-mode . company-box-mode))
#+END_SRC
*** Swiper
    Swiper is an awesome searching utility with a quick preview. Let's install it and
    load it when =swiper= or =swiper-all= is called.

    #+BEGIN_SRC emacs-lisp
(use-package swiper
  :commands (swiper swiper-all))
    #+END_SRC

*** Magit
    The magical git client. Let's load magit only when one of the several entry pont
    functions we invoke regularly outside of magit is called.

    #+BEGIN_SRC emacs-lisp
(use-package magit
  :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))
    #+END_SRC

*** Org
    Let's include a newer version of org-mode than the one that is built in. We're going
    to manually remove the org directories from the load path, to ensure the version we
    want is prioritized instead.

    #+BEGIN_SRC emacs-lisp
(use-package org
	     :ensure org-plus-contrib
	     :pin org
	     :after general
	     :defer t
	     :config
	     (setq org-startup-indented t)
	     (setq org-src-preserve-indentation t)
	     (setq org-log-done t)
	     (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl")))
	     (add-hook 'org-capture-mode-hook 'evil-insert-state)

	     (setq org-latex-listings 'minted
		   org-latex-packages-alist '(("" "minted"))
		   org-latex-pdf-process
		   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
		     "bibtex %b"
		     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
		     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

	     (setq org-agenda-files '("~/Dropbox/org/"))
	     (setq org-agenda-custom-commands
		   '(("c" "Simple agenda view"
		      ((tags "PRIORITY=\"A\""
			     ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
			      (org-agenda-overriding-header "High-priority unfinished tasks:")))
		       (agenda "")
		       (alltodo "")))))


	     ;; org-latex-pdf-process
	     ;; '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     ;;   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
	     (general-define-key :keymaps 'org-mode-map
				 :states '(normal)
				 "RET" 'org-open-at-point
				 "S-<right>" 'org-shiftmetaright
				 "S-<left>" 'org-shiftmetaleft
				 "S-<up>" 'org-shiftmetaup
				 "S-<up>" 'org-shiftmetadown
				 )

	     (general-define-key :keymaps 'doc-view-mode-map
				 :states '(emacs)
				 "<escape>" 'kill-buffer-and-window)

	     (require 'ox-extra)
	     (ox-extras-activate '(ignore-headlines))
	     (add-to-list 'org-latex-classes
			  '("IEEEtran"
			    "\\documentclass{IEEEtran}"
			    ("\\section{%s}" . "\\section*{%s}")
			    ("\\subsection{%s}" . "\\subsection*{%s}")
			    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
			    ("\\paragraph{%s}" . "\\paragraph*{%s}")
			    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
	     (general-define-key :keymaps 'org-capture-mode-map
				 :states '(normal)
				 "q" 'org-capture-finalize))

;; Ensure ELPA org is prioritized above built-in org.
(with-no-warnings
  (require 'cl))
(setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
    #+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org-ref
	     :after general
	     :config
	     (setq
	      org-ref-default-bibliography '("~/research/bibliography.bib")
	      org-ref-pdf-directory "~/research/papers/"
	      org-ref-bibliography-notes "~/research/papers/papers.org"
	      bibtex-completion-bibliography '("~/research/bibliography.bib")
	      bibtex-completion-library-path "~/research/papers"
	      bibtex-completion-notes-path "~/research/papers/papers.org"
	      org-ref-completion-library 'org-ref-ivy-cite)

	     (setq bibtex-completion-notes-template-one-file "
,* ${title} (${year}) [${author-or-editor}]
  :PROPERTIES:
  :Custom_ID: ${=key=}
  :END:

"))
#+END_SRC

Make latexpdf and beamer-pdf be one function
#+BEGIN_SRC emacs-lisp
(defun tpanum/org-to-pdf ()
  (interactive)
  (if (string-match "latex_class:[ ]*beamer" (buffer-string)) ; current buffer contains beamer class
      (org-beamer-export-to-pdf)
    (org-latex-export-to-pdf)))
#+END_SRC

Export to reveal.js
#+BEGIN_SRC emacs-lisp
(use-package org-re-reveal
  :after org
  :config
  (setq org-re-reveal--href-fragment-prefix org-re-reveal--slide-id-prefix)
)
#+END_SRC

Export to spectacle
#+BEGIN_SRC emacs-lisp
(use-package ox-spectacle
  :ensure t
  :after org)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package worf
	     :ensure t
	     :after general
	     :config
	     (defun bjm/worf-insert-internal-link ()
	       "Use ivy to insert a link to a heading in the current `org-mode' document. Code is based on `worf-goto'."
	       (interactive)
	       (let ((cands (worf--goto-candidates)))
		 (ivy-read "Heading: " cands
			   :action 'bjm/worf-insert-internal-link-action)))

(use-package with-simulated-input
:ensure t
:config
(defun bjm/worf-insert-internal-link-action (x)
  "Insert link for `bjm/worf-insert-internal-link'"
  ;; go to heading
  (save-excursion
    (goto-char (cdr x))
    ;; store link
    (call-interactively 'org-store-link))
  ;; return to original point and insert link
  (with-simulated-input "RET" (call-interactively 'org-insert-last-stored-link))
  ;; org-insert-last-stored-link adds a newline so delete this
  (delete-char -1))

             (general-define-key :keymaps 'org-mode-map
                                 :states '(normal)
                                 "C-c v" 'bjm/worf-insert-internal-link)))
#+END_SRC

*** Toc-org
    Let's install and load the =toc-org= package after org mode is loaded. This is the
    package that automatically generates an up to date table of contents for us.

    #+BEGIN_SRC emacs-lisp
(use-package toc-org
  :after org
  :init (add-hook 'org-mode-hook #'toc-org-enable))
    #+END_SRC

*** Which Key
    #+BEGIN_SRC emacs-lisp
    (use-package which-key
    :ensure t
    :config
    (setq which-key-idle-delay 0.4)
    (which-key-mode))
    #+END_SRC
*** General (Navigation)
I replaced evil's default `/` with `swiper`.
#+BEGIN_SRC emacs-lisp
(use-package general
	     :ensure t
	     :config
	     (general-auto-unbind-keys)
	     (general-define-key
	      :states '(normal visual emacs)
	      :prefix "SPC"
	      
	      "aa" 'apropos
	      "b" 'ivy-switch-buffer
        "co" 'tpanum/open-config
	      "f" 'find-file
	      "gs" 'magit-status
	      "h"  '(:ignore t :which-key "Help")
	      "hf" 'describe-function
	      "hk" 'describe-key
	      "hm" 'describe-mode
	      "hr" 'info-emacs-manual
	      "hv" 'describe-variable
	      "irc" 'tpanum/irc
        "j" 'avy-goto-word-or-subword-1

	      "o"  '(:ignore t :which-key "Org")
	      "oc" 'tpanum/org-capture-todo
	      "oa" 'tpanum/org-agenda

	      "p"  '(:ignore t :which-key "Programming")
	      "pe" 'next-error

	      "q" 'kill-this-buffer
	      "r"  '(:ignore t :which-key "Research")
	      "rad" 'doi-utils-add-bibtex-entry-from-doi
	      "ras" 'doi-utils-add-entry-from-crossref-query
	      "rc" 'org-ref-helm-insert-cite-link
	      "rw" 'helm-bibtex
	      "wo" 'other-window
	      "wd" 'delete-other-windows
	      "wsh" 'split-window-right
	      "wsv" 'split-window-below
	      "xc" 'save-buffers-kill-terminal
	      "xe" 'eval-last-sexp)

	     (general-define-key
	      :states '(normal)
	      "/" 'swiper)
	     )

(define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
(define-key ivy-minibuffer-map (kbd "s-j") 'ivy-next-line)
(define-key ivy-minibuffer-map (kbd "s-k") 'ivy-previous-line)
(define-key ivy-minibuffer-map (kbd "<RET>") 'ivy-alt-done)
(define-key ivy-minibuffer-map (kbd "C-s") 'tpanum/ivy-rg-search)

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
    #+END_SRC

**** ripgrep search from minibuffer
Allow me to access ripgrep from find file.
#+BEGIN_SRC emacs-lisp
(defmacro minibuffer-quit-and-run (&rest body)
  "Quit the minibuffer and run BODY afterwards."
  `(progn
     (run-at-time nil nil
                  (lambda ()
                    (put 'quit 'error-message "Quit")
                    ,@body))
     (minibuffer-keyboard-quit)))

(defun tpanum/ivy-rg-search ()
  (interactive)
  (minibuffer-quit-and-run
   (let ((selected-candidate (concat (file-name-as-directory ivy--directory) (ivy-state-current ivy-last))))
     (if (file-directory-p selected-candidate) (counsel-rg "" selected-candidate) (counsel-rg "" ivy--directory)))))
#+END_SRC

*** Aggresive Indent
    #+BEGIN_SRC emacs-lisp

    (use-package aggressive-indent
    :ensure t
  :config
  (global-aggressive-indent-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'sql-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'nix-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'vue-mode)
  (add-to-list 'aggressive-indent-excluded-modes 'web-mode))
    #+END_SRC

*** Yassnippets
    #+BEGIN_SRC emacs-lisp
(use-package yasnippet
	     :diminish yas-minor-mode
	     :commands (yas-global-mode)
	     :defer 2
	     :init
	     (with-eval-after-load 'yasnippet
	       (progn
		 (setq yas-snippet-dirs
		       (append yas-snippet-dirs '("~/.emacs.d/snippets")))))
	     :config
	     (yas-global-mode)
	     (setq yas-indent-line 'none))
    #+END_SRC

*** Nlinum
    #+BEGIN_SRC emacs-lisp
(use-package nlinum
	     :ensure t
	     :config (add-hook 'prog-mode-hook '(lambda () (nlinum-mode t)))
	     (setq nlinum-highlight-current-line t))
    #+END_SRC

*** Circe (IRC)
My IRC Configuration
#+BEGIN_SRC emacs-lisp
(use-package circe
:config
(defconst irc-left-padding 8 "Padding for nicks")
(defconst irc-time-stamp-format "%H:%M")

(require 'circe-color-nicks)
(enable-circe-color-nicks)

(require 'circe-lagmon)
(circe-lagmon-mode)

(setq
 circe-reduce-lurker-spam t
 circe-default-part-message "Bye"
 circe-default-quit-message "Bye"
 circe-color-nicks-everywhere t
 circe-format-say (format "{nick:+%ss} │ {body}" irc-left-padding)
 circe-format-self-say circe-format-say
 circe-format-action (format "{nick:+%ss} * {body}" irc-left-padding)
 circe-format-self-action circe-format-action
 circe-network-defaults ()
 circe-network-options
 `(("freenode"
    :host "weechat.panum.dk"
    :port 8000
    :server-buffer-name "⇄ freenode"
    :nick "tpanum"
    :user "tpanum"
    :pass weechat-relay-freenode-pass
    :use-tls t
    )
   ("znc-bitlbee"
    :host "znc.panum.dk"
    :port 5000
    :server-buffer-name "⇄ freenode"
    :nick "tpanum"
    :user "znc/freenode"
    :pass personal-znc-pass
    ;; :lagmon-disabled t
    :tls t
    )))
 
(setq lui-fill-type nil)

(add-hook 'circe-channel-mode-hook #'turn-on-visual-line-mode)

(defvar irc-truncate-nick-char ?…
  "Character to displayed when nick > `irc-left-padding' in length.")

(defun irc-circe-truncate-nicks ()
  "Truncate long nicknames in chat output non-destructively."
  (when-let ((beg (text-property-any (point-min) (point-max) 'lui-format-argument 'nick)))
    (goto-char beg)
    (let ((end (next-single-property-change beg 'lui-format-argument))
          (nick (plist-get (plist-get (text-properties-at beg) 'lui-keywords)
                           :nick)))
      (when (> (length nick) irc-left-padding)
        (compose-region (+ beg irc-left-padding -1) end
			irc-truncate-nick-char)))))

(add-hook 'lui-pre-output-hook 'irc-circe-truncate-nicks)

(defun irc-init-lui-margins ()
  "Fix margins for irc"
  (setq lui-time-stamp-position 'right-margin
        lui-time-stamp-format irc-time-stamp-format
        right-margin-width (length (format-time-string lui-time-stamp-format))))

(defun irc-init-lui-wrapping ()
  "Fix wrapping for irc"
  (interactive)
  (setq fringes-outside-margins t
        word-wrap t
        wrap-prefix (concat (make-string (+ irc-left-padding 1) ? ) "│ ")))

(add-hook 'lui-mode-hook 'irc-init-lui-wrapping)
(add-hook 'lui-mode-hook 'irc-init-lui-margins))
#+END_SRC

Enable notifications
#+BEGIN_SRC emacs-lisp
(use-package circe-notifications
:ensure t
:config
(setq 
circe-notifications-wait-for 2
circe-notifications-JOIN nil
circe-notifications-PART nil)
(add-to-list 'circe-notifications-watch-strings "#slack-aau-ntp")
(add-to-list 'circe-notifications-watch-strings "#slack-aau-backend")
(add-to-list 'circe-notifications-watch-strings "#slack-aau-random")
(add-to-list 'circe-notifications-watch-strings "#slack-aau-research")
(add-hook 'circe-server-connected-hook 'tpanum/enable-circe-notifications))
#+END_SRC
**** Custom Notifications Function
Delay the activation of notifications and create a custome display function which ignores znc playback
#+BEGIN_SRC emacs-lisp
(defun tpanum/enable-circe-notifications ()
  "Turn on notifications."
  (interactive)
  (run-at-time "5sec" nil 'enable-circe-notifications))

(defun circe-notifications-notify (nick body channel)
  (if (and (not (string-match "^\[[0-9]+:[0-9]+\]" body)) ; make sure playback messages from znc are not displayed
  (not (string-match "^\\\*\\\*\\\*$" nick))
  (not (string-match "^/\\(PART\\|JOIN\\)" body))) 
      (alert
       (concat "<b>" nick "</b>: " body)
       :severity circe-notifications-alert-severity
       :title channel
       :category "chat"
       :style circe-notifications-alert-style)))
#+END_SRC

**** Password Functions
#+BEGIN_SRC emacs-lisp
(defun weechat-relay-freenode-pass (server)
  "Return the password for the `SERVER'."
  (concat "freenode" ":" (password-store-get "personal/weechat-relay")))

(defun personal-znc-pass (server)
  "Return the password for the `SERVER'."
  (concat "freenode" ":" (password-store-get "personal/znc")))
#+END_SRC

**** Start IRC Function
#+BEGIN_SRC emacs-lisp
(defun tpanum/irc ()
  "Connect to IRC"
  (interactive)
  ;; (circe "znc-freenode")
  (circe "znc-bitlbee"))
#+END_SRC
*** ERC (IRC)
#+BEGIN_SRC emacs-lisp
(use-package erc
:after password-store
  :custom
  (erc-autojoin-timing 'ident)
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 14)
  (erc-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (erc-lurker-threshold-time 43200)
  (erc-prompt-for-nickserv-password nil)
  (erc-server-reconnect-attempts 20)
  (erc-server-reconnect-timeout 5)
  (erc-prompt "   >")
(erc-notifications-icon "~/.icons/hashtag-solid.svg")
  (erc-track-exclude-types '("JOIN" "MODE" "NICK" "PART" "QUIT"
                             "324" "329" "332" "333" "353" "477"))

  :config
  (add-to-list 'erc-modules 'notifications)
  (add-to-list 'erc-modules 'spelling)
  (erc-services-mode 1)
  (erc-truncate-mode 1)
  (erc-update-modules)
  )


  (defun erc-notifications-notify-on-match (match-type nickuserhost msg)
  (when (eq match-type 'current-nick)
    (let ((nick (nth 0 (erc-parse-user nickuserhost))))
      (unless (or (string-match-p "^Server:" nick)
                  (string-match-p "^\[[0-9]+:[0-9]+\]" msg)
                  (when (boundp 'erc-track-exclude)
                    (member nick erc-track-exclude)))
        (erc-notifications-notify nick msg)))))

(use-package erc-hl-nicks
  :after erc
  :config
  (setq erc-hl-nicks-maximum-luminence 80))

(use-package erc-image
  :after erc)
#+END_SRC
*** Password Store
#+BEGIN_SRC emacs-lisp
(use-package password-store
:ensure t)
#+END_SRC
*** Language Servers
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :init
  (setq lsp-auto-guess-root t)
  (setq lsp-prefer-flymake nil)
  :config
  (require 'lsp-clients)
  (add-hook 'prog-mode-hook (lambda () (flymake-mode -1)))
  (define-key lsp-mode-map (kbd "S-<f6>") 'lsp-rename)
  (defun tpanum/activate-lsp () (lsp))
  :hook ((python-mode) . tpanum/activate-lsp))

(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

(use-package company-lsp
  :ensure t
  :commands company-lsp)
#+END_SRC
*** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :ensure t
  :config
  (progn
  (require 'smartparens-config)
  (add-to-list 'sp-ignore-modes-list 'circe-channel-mode)
  (add-to-list 'sp-ignore-modes-list 'circe-server-mode)
  (add-to-list 'sp-ignore-modes-list 'circe-query-mode)
  (smartparens-global-mode 1)))
#+END_SRC
*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
:config
(add-hook 'prog-mode-hook #'rainbow-mode))
#+END_SRC
*** Rainbow-Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
:hook (emacs-lisp-mode . rainbow-delimiters-mode))
#+END_SRC
*** Flyspell Mode
#+BEGIN_SRC emacs-lisp
(use-package ispell
	     :defer 15
	     :after general
	     :config
	     (progn
	       (cond
		((executable-find "aspell")
		 (setq ispell-program-name "aspell")
		 (setq ispell-extra-args   '("--sug-mode=ultra"
					     "--lang=en_US")))
		((executable-find "hunspell")
		 (setq ispell-program-name "hunspell")
		 (setq ispell-extra-args   '("-d en_US"))))

	       ;; Save a new word to personal dictionary without asking
	       (setq ispell-silently-savep t)

	       (use-package flyspell
			    :init
			    (setq flyspell-use-meta-tab nil)
			    (general-define-key
			     :states '(normal visual emacs)
			     :prefix "SPC"
			     "lc" 'cycle-languages
			     )
			    :config
			    (progn
			      (add-hook 'prog-mode-hook #'flyspell-prog-mode)
			      (with-eval-after-load 'auto-complete
				(ac-flyspell-workaround))
			      ;; https://github.com/larstvei/dot-emacs#flyspell
			      (add-hook 'text-mode-hook #'turn-on-flyspell)
			      (add-hook 'org-mode-hook  #'turn-on-flyspell)

			      ;; https://github.com/d12frosted/flyspell-correct
			      (use-package flyspell-correct-ivy
					   :after flyspell-correct
					   :bind (:map modi-mode-map
						       ("<f12>" . flyspell-correct-word-generic)))
			      )))
	     (defun cycle-languages ()
	       "Changes the ispell dictionary to the first element in
ISPELL-LANGUAGES, and returns an interactive function that cycles
the languages in ISPELL-LANGUAGES when invoked."
	       (lexical-let ((ispell-languages '#1=("american" "dansk" . #1#)))
		 (ispell-change-dictionary (car ispell-languages))
		 (lambda ()
		   (interactive)
		   ;; Rotates the languages cycle and changes the ispell dictionary.
		   (ispell-change-dictionary
		    (car (setq ispell-languages (cdr ispell-languages)))))))
	     (defadvice turn-on-flyspell (before check nil activate)
	       "Turns on flyspell only if a spell-checking tool is installed."
	       (when (executable-find ispell-program-name)
		 (local-set-key (kbd "C-c l") (cycle-languages)))))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :config
(add-hook 'after-init-hook #'global-flycheck-mode)
(define-fringe-bitmap 'flycheck-fringe-bitmap-ball
    (vector #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00111000
            #b01111100
            #b11111110
            #b11111110
            #b01111100
            #b00111000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000
            #b00000000))

(flycheck-define-error-level 'error
  :severity 100
  :compilation-level 2
  :overlay-category 'flycheck-error-overlay
  :fringe-bitmap 'flycheck-fringe-bitmap-ball
  :fringe-face 'flycheck-fringe-error
  :error-list-face 'flycheck-error-list-error)
(flycheck-define-error-level 'warning
  :severity 10
  :compilation-level 1
  :overlay-category 'flycheck-warning-overlay
  :fringe-bitmap 'flycheck-fringe-bitmap-ball
  :fringe-face 'flycheck-fringe-warning
  :error-list-face 'flycheck-error-list-warning))
#+END_SRC
*** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :config
  (global-set-key (kbd "s-w") 'ace-window)
(global-set-key [remap other-window] 'ace-window))
#+END_SRC
*** Lang Tool
#+BEGIN_SRC emacs-lisp
(use-package langtool
	     :after general
	     :init
	     (general-define-key
	      :states '(normal visual emacs)
	      :prefix "SPC"
	      "l"  '(:ignore t :which-key "Language")
	      "lcw" 'langtool-check
	      "lcW" 'langtool-check-done
	      "lsw" 'langtool-switch-default-language
	      "lcb" 'langtool-correct-buffer
	      )
	     :config
	     (setq langtool-language-tool-jar "/run/current-system/sw/bin/languagetool" 
		   langtool-default-language "en-US"))
#+END_SRC
*** Synosaurus
#+BEGIN_SRC emacs-lisp
(use-package synosaurus
:init
	     (general-define-key
	      :states '(normal visual emacs)
	      :prefix "SPC"
	      "ls" 'synosaurus-lookup)
:config (setq synosaurus-backend 'synosaurus-backend-wordnet))
#+END_SRC
*** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :after (:all general evil-snipe)
  :defer
  :config
(setq avy-background t)
  (general-define-key 
  :states '(normal operator motion)
  "s" 'evil-avy-goto-char-timer))
#+END_SRC
*** Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :defer t
  :config
  (setf tramp-persistency-file-name
        (concat temporary-file-directory "tramp-" (user-login-name))))
#+END_SRC
** Additional Modes
*** Nix Mode
#+BEGIN_SRC emacs-lisp
(use-package nix-mode
:ensure t
:mode ("\\.nix" . nix-mode)
:config
(setq nix-indent-function 'nix-indent-line))
#+END_SRC

*** Markdown Mode
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown\\'" . gfm-mode)))
#+END_SRC
*** Go Mode
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :init
  (progn
  (if (executable-find "goimports") (setq gofmt-command "goimports"))
  (setq gofmt-command "goimports")
  (add-hook 'before-save-hook 'gofmt-before-save)
  :config
  (add-hook 'go-mode-hook 'electric-pair-mode)
  (add-to-list 'exec-path "/home/tpanum/go/bin")
  :mode "\\.go\\'" ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-go
:config
(add-to-list 'company-backends 'company-go))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-eldoc)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-golangci-lint
:after flycheck
:config (setq flycheck-golangci-lint-executable "golangci-lint run --disable-all --enable typecheck ineffassign golint dupl goconst gocyclo gofmt goimports misspell lll nakedret prealloc")
:hook (go-mode . flycheck-golangci-lint-setup))
#+END_SRC
*** Docker Mode
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
:mode "Dockerfile\\'")
#+END_SRC
*** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
	     :mode (("\\.html?\\'" . web-mode)
		    ("\\.xhtml$"   . web-mode))
	     :config
	     (setq web-mode-enable-engine-detection t))
#+END_SRC
*** Python Mode
#+BEGIN_SRC emacs-lisp
(use-package python
	     :after general
	     :config
	     (defun tpanum/python-console-eval-buffer ()
	       "restart python console and evaluate buffer"
	       (interactive)
	       (if (get-buffer "*Python*")
		   (let ((kill-buffer-query-functions nil)) (switch-to-buffer "*Python*") (kill-buffer-and-window)))
	       (call-interactively 'run-python)
	       (sleep-for 0.05)
	       (call-interactively 'python-shell-send-buffer))
	     (general-define-key :keymaps 'python-mode-map
				 :states '(normal)
				 "C-c C-c" 'tpanum/python-console-eval-buffer))
#+END_SRC
*** Vue Mode
#+BEGIN_SRC emacs-lisp
(use-package vue-mode
:config (setq js-indent-level 2)
:mode (("\\.vue\\'" . vue-mode)))
#+END_SRC
*** JSON Mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.json\\'" . json-mode)))
#+END_SRC
*** YAML Mode
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode (("\\.yml\\'" . yaml-mode)))
#+END_SRC
*** Tex Mode
#+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
	     :config
	     (auctex-latexmk-setup))

(use-package cdlatex
	     :hook (LaTeX-mode . turn-on-cdlatex))

(use-package company-auctex
	     :config
	     (company-auctex-init))

(use-package latex
	     :ensure auctex
	     :mode ("\\.tex\\'" . LaTeX-mode)
	     :init
	     (setq TeX-auto-save t)
	     (setq TeX-parse-self t)
	     (setq-default TeX-master "main"))
#+END_SRC
*** Protobuf Mode
#+BEGIN_SRC emacs-lisp
(use-package protobuf-mode
  :ensure t
:mode ("\\.proto\\'" . protobuf-mode))
#+END_SRC
*** Git Gutter Mode
#+BEGIN_SRC emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode t)
(define-fringe-bitmap 'git-gutter-fr:added
  [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
  nil nil 'center)
(define-fringe-bitmap 'git-gutter-fr:modified
  [224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224 224]
  nil nil 'center)
(define-fringe-bitmap 'git-gutter-fr:deleted
  [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248]
nil nil 'center))
#+END_SRC
** Functions
*** Open Config
#+BEGIN_SRC emacs-lisp
(defun tpanum/open-config ()
(interactive)
(find-file "~/.emacs.d/emacs.org"))
#+END_SRC
** Post Initialization
   Let's lower our GC thresholds back down to a sane level.
   
   #+Begin_SRC emacs-lisp
   (setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
   #+END_SRC

