diff --git a/Makefile b/Makefile
index 470ac86..0b3cecd 100644
--- a/Makefile
+++ b/Makefile
@@ -22,7 +22,7 @@ config.h:
 	$(CC) $(STCFLAGS) -c $<
 
 st.o: config.h st.h win.h
-x.o: arg.h config.h st.h win.h
+x.o: arg.h st.h win.h
 
 $(OBJ): config.h config.mk
 
diff --git a/config.def.h b/config.def.h
index 0e01717..cdfbdc9 100644
--- a/config.def.h
+++ b/config.def.h
@@ -176,8 +176,9 @@ static Shortcut shortcuts[] = {
 	{ TERMMOD,              XK_C,           clipcopy,       {.i =  0} },
 	{ TERMMOD,              XK_V,           clippaste,      {.i =  0} },
 	{ TERMMOD,              XK_Y,           selpaste,       {.i =  0} },
-	{ ShiftMask,            XK_Insert,      selpaste,       {.i =  0} },
 	{ TERMMOD,              XK_Num_Lock,    numlock,        {.i =  0} },
+	{ TERMMOD,              XK_I,           iso14755,       {.i =  0} },
+	{ TERMMOD,              XK_Escape,      keyboard_select,{ 0 } },
 };
 
 /*
diff --git a/config.mk b/config.mk
index 0cbb002..039c42c 100644
--- a/config.mk
+++ b/config.mk
@@ -1,5 +1,5 @@
 # st version
-VERSION = 0.8.2
+VERSION = 0.8.1
 
 # Customize below to fit your system
 
@@ -10,26 +10,19 @@ MANPREFIX = $(PREFIX)/share/man
 X11INC = /usr/X11R6/include
 X11LIB = /usr/X11R6/lib
 
-PKG_CONFIG = pkg-config
-
 # includes and libs
 INCS = -I$(X11INC) \
-       `$(PKG_CONFIG) --cflags fontconfig` \
-       `$(PKG_CONFIG) --cflags freetype2`
+       `pkg-config --cflags fontconfig` \
+       `pkg-config --cflags freetype2`
 LIBS = -L$(X11LIB) -lm -lrt -lX11 -lutil -lXft \
-       `$(PKG_CONFIG) --libs fontconfig` \
-       `$(PKG_CONFIG) --libs freetype2`
+       `pkg-config --libs fontconfig` \
+       `pkg-config --libs freetype2`
 
 # flags
-STCPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
-STCFLAGS = $(INCS) $(STCPPFLAGS) $(CPPFLAGS) $(CFLAGS)
+CPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600
+STCFLAGS = $(INCS) $(CPPFLAGS) $(CFLAGS)
 STLDFLAGS = $(LIBS) $(LDFLAGS)
 
-# OpenBSD:
-#CPPFLAGS = -DVERSION=\"$(VERSION)\" -D_XOPEN_SOURCE=600 -D_BSD_SOURCE
-#LIBS = -L$(X11LIB) -lm -lX11 -lutil -lXft \
-#       `pkg-config --libs fontconfig` \
-#       `pkg-config --libs freetype2`
-
 # compiler and linker
 # CC = c99
+
diff --git a/st.1 b/st.1
index e8d6059..81bceff 100644
--- a/st.1
+++ b/st.1
@@ -159,6 +159,10 @@ Copy the selected text to the clipboard selection.
 .TP
 .B Ctrl-Shift-v
 Paste from the clipboard selection.
+.TP
+.B Ctrl-Shift-i
+Launch dmenu to enter a unicode codepoint and send the corresponding glyph
+to st.
 .SH CUSTOMIZATION
 .B st
 can be customized by creating a custom config.h and (re)compiling the source
diff --git a/st.c b/st.c
index b8e6077..43f4584 100644
--- a/st.c
+++ b/st.c
@@ -16,6 +16,8 @@
 #include <termios.h>
 #include <unistd.h>
 #include <wchar.h>
+#include <X11/keysym.h>
+#include <X11/X.h>
 
 #include "st.h"
 #include "win.h"
@@ -38,11 +40,15 @@
 
 /* macros */
 #define IS_SET(flag)		((term.mode & (flag)) != 0)
+#define NUMMAXLEN(x)		((int)(sizeof(x) * 2.56 + 0.5) + 1)
 #define ISCONTROLC0(c)		(BETWEEN(c, 0, 0x1f) || (c) == '\177')
 #define ISCONTROLC1(c)		(BETWEEN(c, 0x80, 0x9f))
 #define ISCONTROL(c)		(ISCONTROLC0(c) || ISCONTROLC1(c))
 #define ISDELIM(u)		(utf8strchr(worddelimiters, u) != NULL)
 
+/* constants */
+#define ISO14755CMD		"dmenu -w \"$WINDOWID\" -p codepoint: </dev/null"
+
 enum term_mode {
 	MODE_WRAP        = 1 << 0,
 	MODE_INSERT      = 1 << 1,
@@ -252,10 +258,10 @@ xwrite(int fd, const char *s, size_t len)
 void *
 xmalloc(size_t len)
 {
-	void *p;
+	void *p = malloc(len);
 
-	if (!(p = malloc(len)))
-		die("malloc: %s\n", strerror(errno));
+	if (!p)
+		die("Out of memory\n");
 
 	return p;
 }
@@ -264,7 +270,7 @@ void *
 xrealloc(void *p, size_t len)
 {
 	if ((p = realloc(p, len)) == NULL)
-		die("realloc: %s\n", strerror(errno));
+		die("Out of memory\n");
 
 	return p;
 }
@@ -273,7 +279,7 @@ char *
 xstrdup(char *s)
 {
 	if ((s = strdup(s)) == NULL)
-		die("strdup: %s\n", strerror(errno));
+		die("Out of memory\n");
 
 	return s;
 }
@@ -442,7 +448,6 @@ selstart(int col, int row, int snap)
 	selclear();
 	sel.mode = SEL_EMPTY;
 	sel.type = SEL_REGULAR;
-	sel.alt = IS_SET(MODE_ALTSCREEN);
 	sel.snap = snap;
 	sel.oe.x = sel.ob.x = col;
 	sel.oe.y = sel.ob.y = row;
@@ -471,6 +476,7 @@ selextend(int col, int row, int type, int done)
 	oldsey = sel.ne.y;
 	oldtype = sel.type;
 
+	sel.alt = IS_SET(MODE_ALTSCREEN);
 	sel.oe.x = col;
 	sel.oe.y = row;
 	selnormalize();
@@ -683,7 +689,7 @@ execsh(char *cmd, char **args)
 	errno = 0;
 	if ((pw = getpwuid(getuid())) == NULL) {
 		if (errno)
-			die("getpwuid: %s\n", strerror(errno));
+			die("getpwuid:%s\n", strerror(errno));
 		else
 			die("who are you?\n");
 	}
@@ -726,15 +732,13 @@ sigchld(int a)
 	pid_t p;
 
 	if ((p = waitpid(pid, &stat, WNOHANG)) < 0)
-		die("waiting for pid %hd failed: %s\n", pid, strerror(errno));
+		die("Waiting for pid %hd failed: %s\n", pid, strerror(errno));
 
 	if (pid != p)
 		return;
 
-	if (WIFEXITED(stat) && WEXITSTATUS(stat))
-		die("child exited with status %d\n", WEXITSTATUS(stat));
-	else if (WIFSIGNALED(stat))
-		die("child terminated due to signal %d\n", WTERMSIG(stat));
+	if (!WIFEXITED(stat) || WEXITSTATUS(stat))
+		die("child finished with error '%d'\n", stat);
 	exit(0);
 }
 
@@ -779,8 +783,7 @@ ttynew(char *line, char *cmd, char *out, char **args)
 
 	if (line) {
 		if ((cmdfd = open(line, O_RDWR)) < 0)
-			die("open line '%s' failed: %s\n",
-			    line, strerror(errno));
+			die("open line failed: %s\n", strerror(errno));
 		dup2(cmdfd, 0);
 		stty(args);
 		return cmdfd;
@@ -792,7 +795,7 @@ ttynew(char *line, char *cmd, char *out, char **args)
 
 	switch (pid = fork()) {
 	case -1:
-		die("fork failed: %s\n", strerror(errno));
+		die("fork failed\n");
 		break;
 	case 0:
 		close(iofd);
@@ -804,17 +807,9 @@ ttynew(char *line, char *cmd, char *out, char **args)
 			die("ioctl TIOCSCTTY failed: %s\n", strerror(errno));
 		close(s);
 		close(m);
-#ifdef __OpenBSD__
-		if (pledge("stdio getpw proc exec", NULL) == -1)
-			die("pledge\n");
-#endif
 		execsh(cmd, args);
 		break;
 	default:
-#ifdef __OpenBSD__
-		if (pledge("stdio rpath tty proc", NULL) == -1)
-			die("pledge\n");
-#endif
 		close(s);
 		cmdfd = m;
 		signal(SIGCHLD, sigchld);
@@ -833,7 +828,7 @@ ttyread(void)
 
 	/* append read bytes to unprocessed bytes */
 	if ((ret = read(cmdfd, buf+buflen, LEN(buf)-buflen)) < 0)
-		die("couldn't read from shell: %s\n", strerror(errno));
+		die("Couldn't read from shell: %s\n", strerror(errno));
 	buflen += ret;
 
 	written = twrite(buf, buflen, 0);
@@ -1454,8 +1449,7 @@ tsetattr(int *attr, int l)
 			} else {
 				fprintf(stderr,
 					"erresc(default): gfx attr %d unknown\n",
-					attr[i]);
-				csidump();
+					attr[i]), csidump();
 			}
 			break;
 		}
@@ -1980,6 +1974,28 @@ tprinter(char *s, size_t len)
 	}
 }
 
+void
+iso14755(const Arg *arg)
+{
+	FILE *p;
+	char *us, *e, codepoint[9], uc[UTF_SIZ];
+	unsigned long utf32;
+
+	if (!(p = popen(ISO14755CMD, "r")))
+		return;
+
+	us = fgets(codepoint, sizeof(codepoint), p);
+	pclose(p);
+
+	if (!us || *us == '\0' || *us == '-' || strlen(us) > 7)
+		return;
+	if ((utf32 = strtoul(us, &e, 16)) == ULONG_MAX ||
+	    (*e != '\n' && *e != '\0'))
+		return;
+
+	ttywrite(uc, utf8encode(utf32, uc), 1);
+}
+
 void
 toggleprinter(const Arg *arg)
 {
@@ -2264,7 +2280,7 @@ eschandle(uchar ascii)
 	case 'Z': /* DECID -- Identify Terminal */
 		ttywrite(vtiden, strlen(vtiden), 0);
 		break;
-	case 'c': /* RIS -- Reset to initial state */
+	case 'c': /* RIS -- Reset to inital state */
 		treset();
 		resettitle();
 		xloadcols();
@@ -2481,6 +2497,9 @@ tresize(int col, int row)
 	int *bp;
 	TCursor c;
 
+	if ( row < term.row  || col < term.col )
+        toggle_winmode(trt_kbdselect(XK_Escape, NULL, 0));
+
 	if (col < 1 || row < 1) {
 		fprintf(stderr,
 		        "tresize: error resizing to %dx%d\n", col, row);
@@ -2602,3 +2621,220 @@ redraw(void)
 	tfulldirt();
 	draw();
 }
+
+void set_notifmode(int type, KeySym ksym) {
+    static char *lib[] = { " MOVE ", " SEL  "};
+    static Glyph *g, *deb, *fin;
+    static int col, bot;
+
+    if ( ksym == -1 ) {
+        free(g);
+        col = term.col, bot = term.bot;
+        g = xmalloc(col * sizeof(Glyph));
+        memcpy(g, term.line[bot], col * sizeof(Glyph));
+    
+    }
+    else if ( ksym == -2 )
+        memcpy(term.line[bot], g, col * sizeof(Glyph));
+
+    if ( type < 2 ) {
+        char *z = lib[type];
+        for (deb = &term.line[bot][col - 6], fin = &term.line[bot][col]; deb < fin; z++, deb++)
+            deb->mode = ATTR_REVERSE,
+            deb->u = *z,
+            deb->fg = defaultfg, deb->bg = defaultbg;
+    }
+    else if ( type < 5 )
+        memcpy(term.line[bot], g, col * sizeof(Glyph));
+    else {
+        for (deb = &term.line[bot][0], fin = &term.line[bot][col]; deb < fin; deb++)
+            deb->mode = ATTR_REVERSE,
+            deb->u = ' ',
+            deb->fg = defaultfg, deb->bg = defaultbg;
+        term.line[bot][0].u = ksym;
+    }
+
+    term.dirty[bot] = 1;
+    drawregion(0, bot, col, bot + 1);
+}
+
+void select_or_drawcursor(int selectsearch_mode, int type) {
+    int done = 0;
+
+    if ( selectsearch_mode & 1 ) {
+        selextend(term.c.x, term.c.y, type, done);
+        xsetsel(getsel());
+    }
+    else
+        xdrawcursor(term.c.x, term.c.y, term.line[term.c.y][term.c.x],
+                    term.ocx, term.ocy, term.line[term.ocy][term.ocx]);
+}
+
+void search(int selectsearch_mode, Rune *target, int ptarget, int incr, int type, TCursor *cu) {
+    Rune *r;
+    int i, bound = (term.col * cu->y + cu->x) * (incr > 0) + incr;
+
+    for (i = term.col * term.c.y + term.c.x + incr; i != bound; i += incr) {
+        for (r = target; r - target < ptarget; r++) {
+            if ( *r == term.line[(i + r - target) / term.col][(i + r - target) % term.col].u ) {
+                if ( r - target == ptarget - 1 )     break;
+            } else {
+                r = NULL;
+                break;
+            }
+        }
+        if ( r != NULL )    break;
+    }
+        
+    if ( i != bound ) {
+        term.c.y = i / term.col, term.c.x = i % term.col;
+        select_or_drawcursor(selectsearch_mode, type);
+    }
+}
+
+int trt_kbdselect(KeySym ksym, char *buf, int len) {
+    static TCursor cu;
+    static Rune target[64];
+    static int type = 1, ptarget, in_use;
+    static int sens, quant;
+    static char selectsearch_mode;
+    int i, bound, *xy;
+    
+    
+    if ( selectsearch_mode & 2 ) {
+		if ( ksym == XK_Return ) {
+			selectsearch_mode ^= 2;
+			set_notifmode(selectsearch_mode, -2);
+            if ( ksym == XK_Escape )    ptarget = 0;
+			return 0;
+		}
+        else if ( ksym == XK_BackSpace ) {
+            if ( !ptarget )     return 0;
+            term.line[term.bot][ptarget--].u = ' ';
+		}
+        else if ( len < 1 ) {
+			return 0;
+		}
+        else if ( ptarget == term.col  || ksym == XK_Escape ) {
+            return 0;
+        }
+		else {
+            utf8decode(buf, &target[ptarget++], len);
+            term.line[term.bot][ptarget].u = target[ptarget - 1];
+		}
+
+        if ( ksym != XK_BackSpace )
+            search(selectsearch_mode, &target[0], ptarget, sens, type, &cu);
+
+        term.dirty[term.bot] = 1; 
+        drawregion(0, term.bot, term.col, term.bot + 1);
+        return 0;
+    }
+
+    switch ( ksym ) {
+    case -1 :
+        in_use = 1;
+        cu.x = term.c.x, cu.y = term.c.y;
+        set_notifmode(0, ksym);
+        return MODE_KBDSELECT;
+    case XK_s :
+        if ( selectsearch_mode & 1 )
+            selclear();
+        else
+            selstart(term.c.x, term.c.y, 0);
+        set_notifmode(selectsearch_mode ^= 1, ksym);
+        break;
+    case XK_t :
+        selextend(term.c.x, term.c.y, type ^= 3, i = 0);  /* 2 fois */
+        selextend(term.c.x, term.c.y, type, i = 0);
+        break;
+    case XK_slash :
+    case XK_KP_Divide :
+    case XK_question :
+        ksym &= XK_question;                /* Divide to slash */
+        sens = (ksym == XK_slash) ? -1 : 1;
+        ptarget = 0;
+        set_notifmode(15, ksym);
+        selectsearch_mode ^= 2;
+        break;
+    case XK_Escape :
+        if ( !in_use )  break;
+        selclear();
+    case XK_Return :
+        set_notifmode(4, ksym);
+        term.c.x = cu.x, term.c.y = cu.y;
+        select_or_drawcursor(selectsearch_mode = 0, type);
+        in_use = quant = 0;
+        return MODE_KBDSELECT;
+    case XK_n :
+    case XK_N :
+        if ( ptarget )
+            search(selectsearch_mode, &target[0], ptarget, (ksym == XK_n) ? -1 : 1, type, &cu);
+        break;
+    case XK_BackSpace :
+        term.c.x = 0;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_dollar :
+        term.c.x = term.col - 1;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_Home :
+        term.c.x = 0, term.c.y = 0;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_End :
+        term.c.x = cu.x, term.c.y = cu.y;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_Page_Up :
+    case XK_Page_Down :
+        term.c.y = (ksym == XK_Prior ) ? 0 : cu.y;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_exclam :
+        term.c.x = term.col >> 1;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    case XK_asterisk :
+    case XK_KP_Multiply :
+        term.c.x = term.col >> 1;
+    case XK_underscore :
+        term.c.y = cu.y >> 1;
+        select_or_drawcursor(selectsearch_mode, type);
+        break;
+    default :
+        if ( ksym >= XK_0 && ksym <= XK_9 ) {               /* 0-9 keyboard */
+            quant = (quant * 10) + (ksym ^ XK_0);
+            return 0;
+        }
+        else if ( ksym >= XK_KP_0 && ksym <= XK_KP_9 ) {    /* 0-9 numpad */
+            quant = (quant * 10) + (ksym ^ XK_KP_0);
+            return 0;
+        }
+        else if ( ksym == XK_k || ksym == XK_h )
+            i = ksym & 1;
+        else if ( ksym == XK_l || ksym == XK_j )
+            i = ((ksym & 6) | 4) >> 1;
+        else if ( (XK_Home & ksym) != XK_Home || (i = (ksym ^ XK_Home) - 1) > 3 )
+            break;
+
+        xy = (i & 1) ? &term.c.y : &term.c.x;
+        sens = (i & 2) ? 1 : -1;
+        bound = (i >> 1 ^ 1) ? 0 : (i ^ 3) ? term.col - 1 : term.bot;
+
+        if ( quant == 0 )
+            quant++;
+
+        if ( *xy == bound && ((sens < 0 && bound == 0) || (sens > 0 && bound > 0)) )
+            break;
+
+        *xy += quant * sens;
+        if ( *xy < 0 || ( bound > 0 && *xy > bound) )
+            *xy = bound;
+
+        select_or_drawcursor(selectsearch_mode, type);
+    }
+    quant = 0;
+    return 0;
+}
diff --git a/st.h b/st.h
index 38c61c4..d6693bf 100644
--- a/st.h
+++ b/st.h
@@ -80,6 +80,7 @@ void die(const char *, ...);
 void redraw(void);
 void draw(void);
 
+void iso14755(const Arg *);
 void printscreen(const Arg *);
 void printsel(const Arg *);
 void sendbreak(const Arg *);
@@ -109,6 +110,7 @@ size_t utf8encode(Rune, char *);
 void *xmalloc(size_t);
 void *xrealloc(void *, size_t);
 char *xstrdup(char *);
+int trt_kbdselect(KeySym, char *, int);
 
 /* config.h globals */
 extern char *utmp;
diff --git a/win.h b/win.h
index 31f327d..75a2756 100644
--- a/win.h
+++ b/win.h
@@ -21,6 +21,7 @@ enum win_mode {
 	MODE_NUMLOCK     = 1 << 17,
 	MODE_MOUSE       = MODE_MOUSEBTN|MODE_MOUSEMOTION|MODE_MOUSEX10\
 	                  |MODE_MOUSEMANY,
+	MODE_KBDSELECT   = 1 << 18,
 };
 
 void xbell(void);
@@ -36,3 +37,5 @@ void xsetmode(int, unsigned int);
 void xsetpointermotion(int);
 void xsetsel(char *);
 int xstartdraw(void);
+void toggle_winmode(int);
+void keyboard_select(const Arg *);
diff --git a/x.c b/x.c
index 0422421..6e40145 100644
--- a/x.c
+++ b/x.c
@@ -672,8 +672,6 @@ cresize(int width, int height)
 
 	col = (win.w - 2 * borderpx) / win.cw;
 	row = (win.h - 2 * borderpx) / win.ch;
-	col = MAX(1, col);
-	row = MAX(1, row);
 
 	tresize(col, row);
 	xresize(col, row);
@@ -683,8 +681,8 @@ cresize(int width, int height)
 void
 xresize(int col, int row)
 {
-	win.tw = col * win.cw;
-	win.th = row * win.ch;
+	win.tw = MAX(1, col * win.cw);
+	win.th = MAX(1, row * win.ch);
 
 	XFreePixmap(xw.dpy, xw.buf);
 	xw.buf = XCreatePixmap(xw.dpy, xw.win, win.w, win.h,
@@ -733,20 +731,20 @@ xloadcols(void)
 	static int loaded;
 	Color *cp;
 
+	dc.collen = MAX(LEN(colorname), 256);
+	dc.col = xmalloc(dc.collen * sizeof(Color));
+
 	if (loaded) {
 		for (cp = dc.col; cp < &dc.col[dc.collen]; ++cp)
 			XftColorFree(xw.dpy, xw.vis, xw.cmap, cp);
-	} else {
-		dc.collen = MAX(LEN(colorname), 256);
-		dc.col = xmalloc(dc.collen * sizeof(Color));
 	}
 
 	for (i = 0; i < dc.collen; i++)
 		if (!xloadcolor(i, NULL, &dc.col[i])) {
 			if (colorname[i])
-				die("could not allocate color '%s'\n", colorname[i]);
+				die("Could not allocate color '%s'\n", colorname[i]);
 			else
-				die("could not allocate color %d\n", i);
+				die("Could not allocate color %d\n", i);
 		}
 	loaded = 1;
 }
@@ -790,17 +788,15 @@ xhints(void)
 
 	sizeh = XAllocSizeHints();
 
-	sizeh->flags = PSize | PResizeInc | PBaseSize | PMinSize;
+	sizeh->flags = PSize | PResizeInc | PBaseSize;
 	sizeh->height = win.h;
 	sizeh->width = win.w;
 	sizeh->height_inc = win.ch;
 	sizeh->width_inc = win.cw;
 	sizeh->base_height = 2 * borderpx;
 	sizeh->base_width = 2 * borderpx;
-	sizeh->min_height = win.ch + 2 * borderpx;
-	sizeh->min_width = win.cw + 2 * borderpx;
 	if (xw.isfixed) {
-		sizeh->flags |= PMaxSize;
+		sizeh->flags |= PMaxSize | PMinSize;
 		sizeh->min_width = sizeh->max_width = win.w;
 		sizeh->min_height = sizeh->max_height = win.h;
 	}
@@ -873,7 +869,7 @@ xloadfont(Font *f, FcPattern *pattern)
 		if ((XftPatternGetInteger(f->match->pattern, "slant", 0,
 		    &haveattr) != XftResultMatch) || haveattr < wantattr) {
 			f->badslant = 1;
-			fputs("font slant does not match\n", stderr);
+			fputs("st: font slant does not match\n", stderr);
 		}
 	}
 
@@ -882,7 +878,7 @@ xloadfont(Font *f, FcPattern *pattern)
 		if ((XftPatternGetInteger(f->match->pattern, "weight", 0,
 		    &haveattr) != XftResultMatch) || haveattr != wantattr) {
 			f->badweight = 1;
-			fputs("font weight does not match\n", stderr);
+			fputs("st: font weight does not match\n", stderr);
 		}
 	}
 
@@ -910,13 +906,14 @@ xloadfonts(char *fontstr, double fontsize)
 	FcPattern *pattern;
 	double fontval;
 
-	if (fontstr[0] == '-')
+	if (fontstr[0] == '-') {
 		pattern = XftXlfdParse(fontstr, False, False);
-	else
+	} else {
 		pattern = FcNameParse((FcChar8 *)fontstr);
+	}
 
 	if (!pattern)
-		die("can't open font %s\n", fontstr);
+		die("st: can't open font %s\n", fontstr);
 
 	if (fontsize > 1) {
 		FcPatternDel(pattern, FC_PIXEL_SIZE);
@@ -942,7 +939,7 @@ xloadfonts(char *fontstr, double fontsize)
 	}
 
 	if (xloadfont(&dc.font, pattern))
-		die("can't open font %s\n", fontstr);
+		die("st: can't open font %s\n", fontstr);
 
 	if (usedfontsize < 0) {
 		FcPatternGetDouble(dc.font.match->pattern,
@@ -959,17 +956,17 @@ xloadfonts(char *fontstr, double fontsize)
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ITALIC);
 	if (xloadfont(&dc.ifont, pattern))
-		die("can't open font %s\n", fontstr);
+		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_WEIGHT);
 	FcPatternAddInteger(pattern, FC_WEIGHT, FC_WEIGHT_BOLD);
 	if (xloadfont(&dc.ibfont, pattern))
-		die("can't open font %s\n", fontstr);
+		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDel(pattern, FC_SLANT);
 	FcPatternAddInteger(pattern, FC_SLANT, FC_SLANT_ROMAN);
 	if (xloadfont(&dc.bfont, pattern))
-		die("can't open font %s\n", fontstr);
+		die("st: can't open font %s\n", fontstr);
 
 	FcPatternDestroy(pattern);
 }
@@ -1006,13 +1003,13 @@ xinit(int cols, int rows)
 	XColor xmousefg, xmousebg;
 
 	if (!(xw.dpy = XOpenDisplay(NULL)))
-		die("can't open display\n");
+		die("Can't open display\n");
 	xw.scr = XDefaultScreen(xw.dpy);
 	xw.vis = XDefaultVisual(xw.dpy, xw.scr);
 
 	/* font */
 	if (!FcInit())
-		die("could not init fontconfig.\n");
+		die("Could not init fontconfig.\n");
 
 	usedfont = (opt_font == NULL)? font : opt_font;
 	xloadfonts(usedfont, 0);
@@ -1699,6 +1696,13 @@ kpress(XEvent *ev)
 		return;
 
 	len = XmbLookupString(xw.xic, e, buf, sizeof buf, &ksym, &status);
+	if ( IS_SET(MODE_KBDSELECT) ) {
+	  if ( match(XK_NO_MOD, e->state) ||
+	       (XK_Shift_L | XK_Shift_R) & e->state )
+	    win.mode ^= trt_kbdselect(ksym, buf, len);
+	  return;
+	}
+
 	/* 1. shortcuts */
 	for (bp = shortcuts; bp < shortcuts + LEN(shortcuts); bp++) {
 		if (ksym == bp->keysym && match(bp->mod, e->state)) {
@@ -1883,6 +1887,14 @@ usage(void)
 	    " [stty_args ...]\n", argv0, argv0);
 }
 
+void toggle_winmode(int flag) {
+        win.mode ^= flag;
+}
+
+void keyboard_select(const Arg *dummy) {
+    win.mode ^= trt_kbdselect(-1, NULL, 0);
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -1928,7 +1940,7 @@ main(int argc, char *argv[])
 		opt_embed = EARGF(usage());
 		break;
 	case 'v':
-		die("%s " VERSION "\n", argv0);
+		die("%s " VERSION " (c) 2010-2016 st engineers\n", argv0);
 		break;
 	default:
 		usage();
